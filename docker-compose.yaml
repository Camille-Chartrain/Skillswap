version: "3"

services:
  bdd:
    image: "postgres:14-alpine"
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: "skillswap"
      POSTGRES_PASSWORD: "notreApp"
      POSTGRES_USER: "admin"
    volumes:
      - ./apo-skill-swap/BACK/db/migration.sql:/docker-entrypoint-initdb.d/1_migration.sql
      - ./apo-skill-swap/BACK/db/seeding.sql:/docker-entrypoint-initdb.d/2_seeding.sql
      - ./psql:/var/lib/postgresql/data
    container_name: bddLucileCam

  back:
    image: "node:18"
    working_dir: /home/server/apo-skill-swap/BACK
    environment:
      - SECRET_POUR_EXPRESS_SESSION=dmfhmidfghmhifgd
      - PGUSER=admin
      - PGHOST=bdd
      - PGPASSWORD=notreApp
      - PGDATABASE=skillswap
      - PGPORT=5432
    ports:
      - "8080:3000"
    volumes:
      - ./BACK:/home/server/apo-skill-swap/BACK
      - node_modules_back:/home/server/apo-skill-swap/BACK/node_modules
    command: >
      sh -c "ls -al /home/server/apo-skill-swap/BACK && npm install && npm run dev"
    depends_on:
      - bdd

  front:
    image: "node:18"
    working_dir: /home/server/apo-skill-swap/FRONT
    ports:
      - "3000:3000"
    volumes:
      - ./FRONT:/home/server/apo-skill-swap/FRONT
      - node_modules_front:/home/server/apo-skill-swap/FRONT/node_modules
    command: >
      sh -c "ls -al /home/server/apo-skill-swap/FRONT && npm install && npm start"
    depends_on:
      - back

  adminer:
    image: adminer
    ports:
      - 8081:8080
    environment:
      ADMINER_DEFAULT_SERVER: bdd
    depends_on:
      - bdd

volumes:
  node_modules_back:
  node_modules_front:




# #version: "1" # <- Ligne optionnelle (le numéro de version pourra évoluer)

# services:

#   # <- on va décrire la liste des services
#   bdd:
#     # <- Je déclare un service "bdd" pour... ma base de données 
#     # Ce qui suit est la "configuration" de ce service

#     image: "postgres:14-alpine" # on télécharge l'image avec la bonne version de psql
#     ports:
#       - "5433:5432" # on relie le port 5432 du conteneur-service au port 5433 de la vm ubuntu
#     environment:
#       POSTGRES_DB: "skillswap" # optionnelle, car par défaut, l'image va créer une bdd qui a la même nom que POSTGRES_USER
#       POSTGRES_PASSWORD: "notreApp"
#       POSTGRES_USER: "admin"
#     volumes:
#       # sert à stocker les données sur le dd de la vm ubuntu ET à lancer le script pour créer les tables
#       - ./apo-skill-swap/BACK/db/migration.sql:/docker-entrypoint-initdb.d/migration.sql
#         - ./apo-skill-swap/BACK/db/seeding.sql:/docker-entrypoint-initdb.d/seeding.sql 
#         # va créer les tables dans la bdd
#       - ./psql:/var/lib/postgresql/data
#     #user: 1006:1006
#     container_name: bddLucileCam

#  # créer un conteneur à partir d'une image qu'on va créer nous-même à partir d'un dockerfile présent dans le projet
#   node:
#     image: "node:18" # se connecter au service bdd
#     user: "node"

#     working_dir: /home/student/APO-skill-swap/FRONT


#     environment:
#       - SECRET_POUR_EXPRESS_SESSION=dmfhmidfghmhifgd
#       - PGUSER=admin
#       - PGHOST=bdd
#       - PGPASSWORD=notreApp
#       - PGDATABASE=skillswap
#       - PGPORT=5432
#     ports:
#       - "8080:3000" #rediriger le port 3000 du conteneur vers le port 8080 de la vm ubuntu
#     volumes:
#       - ./apo-skill-swap:/home/server/apo-skill-swap
#       - node_modules:/home/server/apo-skill-swap/node_modules
#     depends_on:
#       - bdd
#     command : 'npm run start'
   

#   adminer:
#     image: adminer # on ira chercher l'image directement sur docker hub
#     ports:
#       - 8081:8080 # le port 8080 de la vm ubuntu est déjà pris par le service nodejs, donc on map le port du container adminer sur le port 8081
#     environment:
#       ADMINER_DEFAULT_SERVER: bdd
#     depends_on:
#       - bdd

# volumes:
#   node_modules: